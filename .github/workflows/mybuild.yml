on:
  push:
    branches:
      - master
      # - canBeKilled
  workflow_dispatch:

jobs:
  myBuild:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    # - name: Install Prerequisites
    #   run: .\build\vsts-prerequisites.ps1
    #   shell: pwsh
    # - name: Validate
    #   run: .\build\vsts-validate.ps1
    #   shell: pwsh
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: '5.x'
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.15
    - name: Query needed modules
      id: getReqModules
      shell: pwsh
      run: |
          "RequiredModules=$((Import-PowerShellDataFile ./SecretManagement.ExtensionTemplate/SecretManagement.ExtensionTemplate.psd1).RequiredModules.modulename -join ',')" >> $env:GITHUB_OUTPUT
          (Import-PowerShellDataFile ./SecretManagement.ExtensionTemplate/SecretManagement.ExtensionTemplate.psd1).RequiredModules.modulename -join ','
    - name: Install and cache PowerShell modules
      id: psmodulecache
      uses: potatoqualitee/psmodulecache@v5.2
      with:
        modules-to-cache: ${{ steps.getReqModules.outputs.RequiredModules }}
    # - name: Install and cache PowerShell modules
    #   id: psmodulecache
    #   uses: potatoqualitee/psmodulecache@v5.2
    #   with:
    #     modules-to-cache: PSFramework, PSModuleDevelopment
    - name: Update Changelog
      id: changelog
      uses: natescherer/changelog-management-action@v1
      with:
        mode: release
        releaseVersion: ${{ steps.gitversion.outputs.SemVer }}
    - name: Show that the Action works
      shell: pwsh
      run: |
          Get-Content .\CHANGELOG.md
          #Get-Module -Name PSFramework, PSModuleDevelopment -ListAvailable | Select Path
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    # - name: Build
    #   run: .\build\vsts-build.ps1 -ApiKey $env:APIKEY -Version ${{ steps.gitversion.outputs.SemVer }}
    #   shell: pwsh
    #   env:
    #     APIKEY: ${{ secrets.ApiKey }}
