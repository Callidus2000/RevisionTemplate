on:
  push:
    branches:
      - master
      # - canBeKilled
  workflow_dispatch:
env:
  MODULENAME: SecretManagement.ExtensionTemplate
jobs:
  myBuild:

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
    - uses: actions/checkout@v3
    # - name: Install Prerequisites
    #   run: .\build\vsts-prerequisites.ps1
    #   shell: pwsh
    # - name: Validate
    #   run: .\build\vsts-validate.ps1
    #   shell: pwsh
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: '5.x'
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.15
    - name: Query needed modules
      id: getReqModules
      shell: pwsh
      run: |
          "RequiredModules=$((Import-PowerShellDataFile "./$($env:MODULENAME)/$($env:MODULENAME).psd1").RequiredModules.modulename -join ',')" >> $env:GITHUB_OUTPUT
          # (Import-PowerShellDataFile ./SecretManagement.ExtensionTemplate/SecretManagement.ExtensionTemplate.psd1).RequiredModules.modulename -join ','
    - name: Install and cache PowerShell modules
      id: psmodulecache
      uses: potatoqualitee/psmodulecache@v5.2
      with:
        modules-to-cache: ${{ steps.getReqModules.outputs.RequiredModules }},ChangelogManagement,platyPS
    # - name: Install and cache PowerShell modules
    #   id: psmodulecache
    #   uses: potatoqualitee/psmodulecache@v5.2
    #   with:
    #     modules-to-cache: PSFramework, PSModuleDevelopment
    - name: Update Changelog
      id: changelog
      uses: natescherer/changelog-management-action@v1
      with:
        mode: release
        releaseVersion: ${{ steps.gitversion.outputs.SemVer }}
    - name: Update PowerShell Metadata
      uses: natescherer/update-powershell-metadata-action@v2
      with:
        path: ${{ env.MODULENAME }}
        version: ${{ steps.gitversion.outputs.SemVer }}
        copyright: (c) YYYY Sascha Spiekermann. All rights reserved.
        releaseNotes: ${{ steps.changelog.outputs.releasenotes }}
        # functionsToExportPath: src\public
        description: ${{ steps.metadata.outputs.description }}
    # - name: Generate Markdown Help Files
    #   shell: pwsh
    #   run: |
    #     $DocsPath = Join-Path $env:GITHUB_WORKSPACE docs
    #     if (Test-Path -Path $DocsPath) {
    #       $CleanPath = Join-Path $DocsPath "*"
    #       Remove-Item -Path $CleanPath
    #     } else {
    #       New-Item -Path $DocsPath -ItemType Directory | Out-Null
    #     }
    #     Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
    #     Install-Module -Name platyPS
    #     Get-Module -Name $env:MODULENAME -All | Remove-Module -Force -ErrorAction Ignore
    #     Import-Module -Name "./$($env:MODULENAME)/$($env:MODULENAME).psd1" -Force -ErrorAction Stop
    #     New-MarkdownHelp -Module $env:MODULENAME -OutputFolder $DocsPath | Out-Null
    # - name: Create Documentation for Release
    #   uses: natescherer/markdown-to-html-with-github-style-action@v1.1.0
    #   with:
    #     path: README.md,CHANGELOG.md,docs
    #     outputpath: out
    #     matchpathstructure: true
    # - name: Compress module for GitHub release
    #   id: compress
    #   run: |
    #     $CopySourcePath = Join-Path $env:GITHUB_WORKSPACE "*"
    #     $CopyDestPath = Join-Path $env:RUNNER_WORKSPACE "out"
    #     mkdir $CopyDestPath -erroraction Continue
    #     Copy-Item -Path $CopySourcePath -Destination $CopyDestPath -Recurse
    #     $ZipSourcePath = Join-Path $CopyDestPath "*"
    #     $ZipDestPath = Join-Path $env:GITHUB_WORKSPACE "out" "$env:BARE_REPOSITORY-v$env:GITVERSION_SEMVER.zip"
    #     Compress-Archive -Path $ZipSourcePath -DestinationPath $ZipDestPath
    #     "ZipPath=$ZipDestPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
    - name: Push SemVer Tag
      uses: rickstaa/action-create-tag@v1
      with:
        tag: v${{ steps.gitversion.outputs.SemVer }}
    - name: Commit Changes to Repo
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Release v${{ steps.gitversion.outputs.SemVer }}
        file_pattern: ":!test\\* :!test/*"
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: v${{ steps.gitversion.outputs.SemVer }}
        tag_name: v${{ steps.gitversion.outputs.SemVer }}
        body: |
          # Release v${{ steps.gitversion.outputs.SemVer }}
          ${{ github.event.inputs.ReleaseHeader}}

          ## Changes
          ${{ steps.changelog.outputs.releasenotes }}
    # - name: Create Release
    #   uses: softprops/action-gh-release@v1
    #   with:
    #     name: v${{ steps.gitversion.outputs.SemVer }}
    #     tag_name: v${{ steps.gitversion.outputs.SemVer }}
    #     files: ${{ steps.compress.outputs.ZipPath }}
    #     body: |
    #       # Release v${{ steps.gitversion.outputs.SemVer }}
    #       ${{ github.event.inputs.ReleaseHeader}}

    #       ## Changes
    #       ${{ steps.changelog.outputs.releasenotes }}
    # - name: Show that the Action works
    #   shell: pwsh
    #   run: |
    #       Get-Content .\CHANGELOG.md
    #       #Get-Module -Name PSFramework, PSModuleDevelopment -ListAvailable | Select Path
    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
    # - name: Build
    #   run: .\build\vsts-build.ps1 -ApiKey $env:APIKEY -Version ${{ steps.gitversion.outputs.SemVer }}
    #   shell: pwsh
    #   env:
    #     APIKEY: ${{ secrets.ApiKey }}
